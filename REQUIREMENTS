Requirements for the implementation:
* Lists that modify high-order functions and elements.
* Delegates.
  + Delegates can be used upon particle force evaluation. If a particle has electricfield(), call it. Otherwhise, don't.

SOLVED:
* Classes: all over the place.
* Attribute protection: all over the place.
* Default constructors: Storage, Point
* Destructors: Window
* Namespaces: all the classes are inside namespaces.
* Hierarchy:
  - Three levels: the electric particle is the third level.
  - Inclusion polimorphism: the Storage class has vector<Point>, and it receives Particles, Electrics...
* Overload Polimorphism: In Particle.
* Parametric Polimorphism: in util.hh
* Functions as first order elements and High-Order functions: in util.hh
* Lambda functions: used to initialize the std::function in particle.hh
* Currying: used in Particle::GetField()
* Abstract class: GSObject and Particle are possible abstract classes, because they have pure virtual methods.
* Pattern matching functions (on their definitions).
  - The ClearMatrix function in util.hh uses pattern matching and recursion.
* Recursion as iteration.
